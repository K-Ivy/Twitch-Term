#!/bin/bash
# https://github.com/K-Ivy/Twitch-Term/tree/main

STREAMERS_LIST="/home/k/Documents/Apps/twt-v-configs/streamers-list"
CONFIG_FILE="/home/k/Documents/Apps/twt-v-configs/config"

#############################################################

MISDEPS=()
for d in curl jq fzf streamlink; do command -v "$d" &>/dev/null || MISDEPS+=("$d"); done
[ ${#MISDEPS[@]} -gt 0 ] && { echo -e "MISSING DEPENDS: ${MISDEPS[*]}"; exit 1; }

[[ -f $CONFIG_FILE ]] || { echo "CONFIG not found. Please retrieve it from the repository. Exiting..."; exit 1; }

source "$CONFIG_FILE"

CREDCHECK=$(curl -s -H "Authorization: Bearer $access_token" "https://id.twitch.tv/oauth2/validate")
CREDVD=$(echo "$CREDCHECK" | jq -r '.client_id != null')
[[ "$CREDVD" == "true" ]] || { echo "ACCESS TOKEN missing or invalid. Make sure it is correct or refresh it. Exiting..."; exit 1; }

#############################################################

STREAMERS=()
declare -A STREAMER_QUALITIES
while IFS='|' read -r streamer quality || [ -n "$streamer" ]; do
  [[ "$streamer" =~ ^# || -z "$streamer" ]] && continue
  STREAMERS+=("$streamer")
  STREAMER_QUALITIES["$streamer"]="$quality"
done < "$STREAMERS_LIST"

fzf_options="--reverse --no-hscroll --no-scrollbar --no-info --pointer=$pointer --border=$borderstyle --color=fg:${color_fg},bg:${color_bg},fg+:${color_fg_plus},bg+:${color_bg_plus},hl:${color_hl},hl+:${color_hl_plus},info:${color_info},prompt:${color_prompt},pointer:${color_pointer},border:${color_border}"

headers=("-H" "Authorization: Bearer $access_token" "-H" "Client-Id: $client_id")

##################################################################

main_menu() {
  while true; do
    clear
    menu_options=$(echo -e "  Youtube\n  Streams\n  Vods\n  Exit" | fzf --prompt="  Main Menu > " $fzf_options)
    case "$menu_options" in
      "  Youtube") yt-x ;;
      "  Streams") streams ;;
      "  Vods") vods ;;
      "  Exit") exit 0 ;;
      *) exit 1 ;;
    esac
  done
}

##################################################################

streams() {
  while true; do
    clear
    live_streamers=()
    offline_streamers=()
    # Batch check live status and group streamers
    for ((index=0; index<${#STREAMERS[@]}; index+=batch_per)); do
      bcall=$(curl -s "${headers[@]}" "https://api.twitch.tv/helix/streams?$(printf 'user_login=%s&' "${STREAMERS[@]:index:batch_per}" | sed 's/&$//')")
      for streamer in "${STREAMERS[@]:index:batch_per}"; do
        get_category=$(echo "$bcall" | jq -r --arg login "${streamer,,}" '.data[] | select(.user_login==$login) | .game_name // empty')
        [[ -n "$get_category" ]] && live_streamers+=("LIVE • $streamer${show_category:+ ($get_category)}") || offline_streamers+=("$streamer")
      done
    done

    streams_streamer_list=$(printf "%s\n" "> Watch not-listed streamer <" ${show_entry_to_refresh_status:+"> Refresh the live statuses <"} $([[ ${#live_streamers[@]} -gt 0 ]] && echo "―――――――――――――――――――――――――――――") "${live_streamers[@]}" "―――――――――――――――――――――――――――――" "${offline_streamers[@]}" | fzf --prompt="  Select a streamer... " $fzf_options)

    [[ -z "$streams_streamer_list" ]] && { sleep 0.5; return; }

    [[ "$streams_streamer_list" == "―――――――――――――――――――――――――――――" ]] && continue

    [[ "$streams_streamer_list" == "> Refresh the live statuses <" ]] && continue

    [[ "$streams_streamer_list" == "> Watch not-listed streamer <" ]] && {
     read -p $'\n Enter streamer username: ' livestreamer
      [[ -z $(curl -s "${headers[@]}" "https://api.twitch.tv/helix/streams?user_login=$livestreamer" | jq -r '.data[0].game_name // empty') ]] && { echo -e "\n $livestreamer is not live. Going back..."; sleep 0.5; continue; }
       true
       } || {
      livestreamer=$(echo "$streams_streamer_list" | sed -E 's/^LIVE • ([^ ]+).*$/\1/')
      [[ " ${offline_streamers[@]} " =~ " $livestreamer " ]] && { echo -e "\n $livestreamer is not live. Going back..."; sleep 0.5; continue; }
     }

    live_url="https://www.twitch.tv/$livestreamer"
    url_qualities=($(get_available_qualities "$live_url"))
    preferred_quality="${STREAMER_QUALITIES[$livestreamer]:-$default_quality}"

    sorted_msqualities=$(
     for quality in "${url_qualities[@]}"; do
      [[ "$quality" != "best" && "$quality" != "worst" ]] && echo "$quality"
     done | sort -t'p' -k1,1nr -k2,2nr
    )

    # If from manual input, prompt to choose from available qualities, otherwise resolve quality
    quality_select=$( [[ "$streams_streamer_list" == "> Watch not-listed streamer <" ]] && echo "$sorted_msqualities" | fzf --prompt="  Select quality > " $fzf_options || resolve_quality "$preferred_quality" "${url_qualities[@]}" )

    player_args=$( [[ "$quality_select" == "audio" || "$quality_select" == "audio_only" ]] && echo "${audio_only_args}" || echo "${livestream_player_args}" )

    streamlink ${livestream_streamlink_options} --player "${video_player}" --player-args="${player_args}" "$live_url" "$quality_select" > /dev/null 2>&1 & disown

    clear
    echo -e "\n Please wait for the stream to load... '$quality_select'\n Press ESC to return to the streamer list manually.\n"
    for i in {20..1}; do
      echo -ne " Returning to the streamer list in $i seconds...\r"
      read -rsn1 -t1 key && [[ "$key" == $'\e' ]] && break
    done
  done
}

##################################################################

vods() {
  while true; do
    clear
    sleep 0.5
    vods_streamer_list=$(printf "%s\n" "> Get not-listed streamer's vods <" "――――――――――――――――――――――――――――――――――" "${STREAMERS[@]}" | fzf --prompt="  Select a streamer... " $fzf_options)

    [[ -z "$vods_streamer_list" ]] && { sleep 0.5; return; }

    [[ "$vods_streamer_list" == "――――――――――――――――――――――――――――――――――" ]] && continue

    [[ "$vods_streamer_list" == "> Get not-listed streamer's vods <" ]] && {
      read -p $'\n Enter streamer username: ' vodstreamer
       true
      } || {
     vodstreamer=$(echo "$vods_streamer_list")
    }

    vod_user_id=$(curl -s "${headers[@]}" "https://api.twitch.tv/helix/users?login=$vodstreamer" | jq -r '.data[0].id')

    vod_data=$(curl -s "${headers[@]}" "https://api.twitch.tv/helix/videos?user_id=$vod_user_id&type=archive&sort=time&first=${fetched_vods}" | jq -r '.data[]? | "\(.id)|\(.duration)|\(.title)"')

    [[ -z "$vod_data" ]] && { echo -e "\n $vodstreamer has no VODs. Returning..."; sleep 0.5; continue; }

    vods_list=$(echo "$vod_data" | nl -w2 -s'|' | while IFS='|' read -r number vod_id raw_duration title; do
      # Allow only specified characters and remove extra spaces
      title=$(tr -cd '[:alnum:] @#$%&*()_+=|\-!?.,:;"[]{}<>/\\~' <<< "$title" | sed -E 's/^[[:space:]]+//; s/[[:space:]]+/ /g')
      # Remove seconds from duration
      duration=$(sed -E 's/([0-9]+h[0-9]+m)[0-9]+s/\1/' <<< "$raw_duration")
      echo "$vod_id|$(sed -e "s/\$number/$number/g" -e "s/\$duration/$duration/g" -e "s/\$title/$(sed 's/[&/\\]/\\&/g' <<< "$title")/g" <<< "${vod_titles_format:-\$number. \$duration ◦ \$title}")"
    done)

    while true; do
      clear
      vod_selection=$(printf "%s\n" "|> Start from a specific timestamp <" "|―――――――――――――――――――――――――――――――――――" "$vods_list" | fzf --delimiter='|' --with-nth=2.. --prompt="  Select a VOD > " $fzf_options)

      [[ -z "$vod_selection" ]] && break

      [[ "$vod_selection" == "|―――――――――――――――――――――――――――――――――――" ]] && continue

      vod_url=$( [[ "$vod_selection" == "|> Start from a specific timestamp <" ]] && (
       read -p $'\n Enter VOD number: ' vod_number
       read -p " Enter timestamp (Eg. 1h2m3s): " vod_timestamp
       echo "https://www.twitch.tv/videos/$(sed -n "${vod_number}p" <<< "$vods_list" | cut -d'|' -f1)?t=$vod_timestamp"
        ) || (
       echo "https://www.twitch.tv/videos/$(echo "$vod_selection" | cut -d'|' -f1)"
      ))

      url_qualities=($(get_available_qualities "$vod_url"))
      preferred_quality="${STREAMER_QUALITIES[$vodstreamer]:-$default_quality}"

      sorted_vdqualities=$(
       for quality in "${url_qualities[@]}"; do
        [[ "$quality" != "best" && "$quality" != "worst" ]] && echo "$quality"
       done | sort -t'p' -k1,1nr -k2,2nr
      )

      quality_select=$( [[ "$vods_streamer_list" == "> Get not-listed streamer's vods <" ]] && echo "$sorted_vdqualities" | fzf --prompt="  Select quality > " $fzf_options || resolve_quality "$preferred_quality" "${url_qualities[@]}" )

      player_args=$( [[ "$quality_select" == "audio" || "$quality_select" == "audio_only" ]] && echo "${audio_only_args}" || echo "${vods_player_args}" )

      streamlink ${vods_streamlink_options} --player "${video_player}" --player-args="${player_args}" "$vod_url" "$quality_select" > /dev/null 2>&1 & disown

      clear
      echo -e "\n Please wait for the VOD to load... '$quality_select'\n Press ESC to return to the VOD list.\n"
      for seconds in {5..1}; do
        echo -ne " Returning to the VOD list in $seconds seconds...\r"
        read -rsn1 -t1 key && [[ "$key" == $'\e' ]] && break
      done
    done
  done
}

##################################################################

get_available_qualities() { streamlink --json "$1" | jq -r '.streams|keys[]'; }

resolve_quality() {
  pref=${1//p/}; shift
  qualities=(2160 1440 1080 900 720 700 540 480 360 240 160 audio_only audio)
  for res in "${qualities[@]}"; do
    # Skip qualities higher than the preferred so if preferred isn't available, the closest lower quality is used
    [[ "$res" -gt "$pref" ]] && continue
    for quality in "$@"; do
      [[ "$quality" == "${res}p"* || "$quality" == "$res" ]] && { echo "$quality"; return; }
    done
  done
 echo "best"
}

##################################################################
main_menu
